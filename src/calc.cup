import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;

parser code {:
    scanner s;
    parser(scanner s){ this.s=s; }

    private HashMap<String, Object> var = new HashMap<>();

    private Double toNumber(Object value) {
        if (value instanceof Integer) {
            return ((Integer) value).doubleValue();
        } else if (value instanceof Double) {
            return (Double) value;
        } else {
            throw new IllegalArgumentException("Cannot convert to Double: " + value);
        }
    }

    private Boolean toBoolean(Object value) {
      if (value instanceof Boolean) {
          return (Boolean) value;
      } else {
          throw new IllegalArgumentException("Cannot convert to Boolean: " + value);
      }
    }
:}

scan with {: return s.next_token(); :};
terminal ID;
terminal PLUS, MINUS, TIMES, DIV, MOD;
terminal EQ, NEQ, GT, LT, GTE, LTE;
terminal ESCREVA;
terminal ASSIGN;
terminal SEMI, UMINUS, LPAREN, RPAREN;
terminal Integer INT;
terminal Double FLOAT;
terminal Boolean BOOLEANO;
terminal AND, OR, NOT;

non terminal            expr_list;
non terminal Object    expr;

precedence left OR, AND, NOT;
precedence left GT, LT, GTE, LTE, EQ, NEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence left UMINUS;

expr_list ::= expr_list ESCREVA expr:e SEMI {: System.out.println(e); :}
            | expr_list expr:e SEMI         {: System.out.println("Running fiddle"); /* Vai fazer a expressão só não vai imprimir */ :}
            | ESCREVA expr:e SEMI           {: System.out.println(e); :}
            | expr:e SEMI                   {: System.out.println("Running fiddle"); /* Vai fazer a expressão só não vai imprimir  */ :}
;

expr ::= ID:id ASSIGN expr:e {: 
            var.put((String) id, e); 
            RESULT = e; 
         :}
       | ID:id {: 
            RESULT = var.get((String) id); 
            if (RESULT == null) {
                throw new RuntimeException("Variable '" + id + "' not defined.");
            }
         :}
             | expr:e1 PLUS  expr:e2         {: RESULT = toNumber(e1) + toNumber(e2); :}
             | expr:e1 MINUS expr:e2        {: RESULT = toNumber(e1) - toNumber(e2); :}
             | expr:e1 TIMES expr:e2        {: RESULT = toNumber(e1) * toNumber(e2); :}
             | expr:e1 DIV expr:e2          {: RESULT = toNumber(e1) / toNumber(e2); :}
             | expr:e1 MOD expr:e2          {: RESULT = toNumber(e1) % toNumber(e2); :}
             | MINUS expr:e                 {: RESULT = -toNumber(e);                :}
               %prec UMINUS
             | expr:e1 GT expr:e2           {: RESULT = toNumber(e1) > toNumber(e2); :}
             | expr:e1 LT expr:e2           {: RESULT = toNumber(e1) < toNumber(e2); :}
             | expr:e1 GTE expr:e2          {: RESULT = toNumber(e1) >= toNumber(e2); :}
             | expr:e1 LTE expr:e2          {: RESULT = toNumber(e1) <= toNumber(e2); :}
             | expr:e1 EQ expr:e2           {: RESULT = toNumber(e1).equals(toNumber(e2)); :}
             | expr:e1 NEQ expr:e2          {: RESULT = !toNumber(e1).equals(toNumber(e2)); :}
             | expr:e1 AND expr:e2          {: RESULT = toBoolean(e1) && toBoolean(e2); :}
             | expr:e1 OR expr:e2           {: RESULT = toBoolean(e1) || toBoolean(e2); :}
             | NOT expr:e                   {: RESULT = !toBoolean(e);                :}
             | LPAREN expr:e RPAREN         {: RESULT = e;           :}
             | INT:n                        {: RESULT = (double) n;  :}
             | FLOAT:n                      {: RESULT = n;           :}
             | BOOLEANO:b                   {: RESULT = b; :}
             ;